
①企画概要
+データベースに個人情報とテスト結果を入出力・編集・削除・表示できるWebページを作成する。

②画面設計
	+Indexページにテストデータを表示させる。
		+全データをまとめて表示させる（生徒ID｜名前｜テスト名(中間・期末・その他)｜各教科｜合計点｜平均点｜削除ボタン）
		+全データを各テスト（中間or期末のみ）別で表示させる
		+ユーザを指定して結果を表示させる
			+中間と期末をそれぞれ分けて表示させてもよい
			+各教科ごとの平均点を算出する。
	+[個人情報]・[テスト]・[編集]それぞれの入力フォームへ遷移させるボタン作成
		+削除に関してはIndex画面上でできるようにする
	+画面は、「Index（ホーム）」「個人情報登録」「テスト結果入力」「編集」の4ページ
	+画面遷移図
					[個人情報登録]
						↑
			[テスト結果入力]←[ホーム]→[テスト結果編集]


③各フォームの設計
+テスト入力フォーム
	+データベース上に存在する個人情報（ID+名前）を選択する
	+プルダウンにすること
	+選択したIDのテスト結果（国・数・英・理・社）を入力できるinputを作成する
		+入力する値は、数値のみ可
		+入力する数値は、0以上100以下でなければエラーとする
		+記入がない場合0とする。(後日追試予定と考える)
	+何のテスト（中間・期末、その他テスト）か選択できるようにする。ラジオボタンかプルダウン
	+送信ボタンを設けてデータベースに反映させる。
+個人情報入力フォーム
	+名前・生年月日・性別 の入力できるフォームを作成する
	+入力できる名前の文字数は25文字未満とする。（日本で一番長い名前が「ひらたいら へいべいへそしたちんないしゅんかんえもん」の25文字） 
	+送信ボタンを設けて、全フォームに入力がなければ送信できないようにする
+編集フォーム
	+テスト結果表示画面から遷移させる。
	+既存データを取得し、フォーム内に表示されている初期状態にする
	+記入がない箇所は、記入漏れを知らせるエラーを出す
	+全フォームに値が入力されている状態のみ送信可能
+削除
	+確認ダイアログで本当に削除するか確認させる。

④データベース
+RDBの練習のため3つ以上に分けて作成する
	+個人情報DB
	[フィールド]
		+ID	→	PRI	,	auto_increment
		+名前
		+性別
		+年齢	→（変更）生年月日
	同姓同名であってもIDで差別化するためにプライマリキーを「ID」
	+テスト名情報DB
	[フィールド]
		+ID	→	PRI	,	auto_incriment
		+テスト名（中間テスト、期末テスト、など）
		+tsetday
	同名のテストでもIDを分けることでいつのテストなのかを選別（※前期・後期カラムも必要かな...）
	+生徒それぞれのテスト結果情報DB
	[フィールド]	
		+ID
		+名前
		+テストのID取得
		+国語
		+数学
		+英語
		+理科
		+社会
		+作成日	→	PRI
		+編集日
	編集できるように、登録の際に衝突する可能性が少ない作成日をプライマリ


正規化することで、無駄がなく、情報を更新した時に異常が起こらない柔軟なデータベースを作成することができる。
